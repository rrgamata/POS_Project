/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddClient.java
 *
 * Created on Jul 17, 2013, 2:38:44 PM
 */
package pos_project.UI;

import java.util.ArrayList;
import java.util.Locale;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import pos_project.Action.FractionAction;
import pos_project.Action.ItemAction;
import pos_project.Action.LocationAction;
import pos_project.classes.Client;
import pos_project.classes.ErrorMessages;
import pos_project.classes.Item;
import pos_project.classes.ItemLimit;
import pos_project.classes.Preorder;
import pos_project.classes.PreorderTransaction;
import pos_project.classes.Stocks;
import pos_project.classes.Transaction;

/**
 *
 * @author Cif3r
 */
public class InItemLimitUi extends javax.swing.JDialog {
 private boolean outFlg = false;
//    private String itemNumber;
 private boolean editFlg = false;
    private String itemNumber;
    
    private int supplierId;
    private int locationId;
    boolean isPreorder = false;
     private ArrayList<Transaction> addList = new ArrayList<Transaction>();
    private ArrayList<Transaction> removeList = new ArrayList<Transaction>();
    Item item;
    Client client;
    private Transaction transaction;
    private PreorderTransaction potransaction;
    Client location;
    Preorder preorder;
    boolean isTransfer = false;
    /** Creates new form AddClient */
    public InItemLimitUi(java.awt.Frame parent, boolean modal, boolean isOut) {
        super(parent, modal);
        initComponents();
        outFlg = isOut;
//        jLabel5.setVisible(false);
//        transactionNumberTextField.setVisible(false);
//        this.setTitle("New Invoice Details");
//        if(isOut){
//            customerNameLabel.setEnabled(true);
//            supplierLabel.setEnabled(true);
//            jButton1.setEnabled(true);
//        } else {
//            customerNameLabel.setVisible(false);
//            supplierLabel.setVisible(false);
//            jButton1.setVisible(false);
//        }
    }
    
    public InItemLimitUi(java.awt.Frame parent, Boolean modal, boolean editflg, String clientNumber) {
        initComponents();
        ledgerLocationComboBox.setModel(LocationAction.getLocationModel());
        if(editflg){
            initialize(editflg);
            Item c = Item.getItem(clientNumber);
            itemNameLabel.setText(c.getItemName());
            supplierNameLabel.setText(c.getClientName());
            priceLabel.setText(c.getItemPrice().toString());
            this.itemNumber = clientNumber;
            client = Client.getClient(clientNumber);
        } 
        Client loc = (Client) ledgerLocationComboBox.getSelectedItem();
        if(ItemLimit.checkItemLimitExist(itemNumber, loc.getClientId().toString()) > 0){
                ItemLimit i = ItemLimit.getItemLimit(itemNumber, loc.getClientId().toString());
                quantityTextField.setText(FractionAction.convertToFraction(i.getItemLimitQuantity()));
        } else {
                quantityTextField.setText("0");
        }        
        
                
        
    
    }
    
     private void initialize( boolean editflg){
        JOptionPane.setDefaultLocale(Locale.ENGLISH);
        setDefaultCloseOperation(this.DO_NOTHING_ON_CLOSE);
        
        editFlg = editflg;
//        ArrayList<Client> supplierList = Client.getCustomerList(1);
//        DefaultComboBoxModel comb = new DefaultComboBoxModel(supplierList.toArray());
//        supplierComboBox.setModel(comb);
//        supplierComboBox.setRenderer(new ClientRenderer());
        if(editFlg){
            this.setTitle("Item Details");
        } else {
            this.setTitle("Item Details");
        }
    }
    
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        AddClientOkButton = new javax.swing.JButton();
        AddClientCancelButton = new javax.swing.JButton();
        supplierNameLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        itemNameLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        quantityTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ledgerLocationComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setPreferredSize(new java.awt.Dimension(400, 250));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Item Details");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel3.setText("Item Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 10);
        getContentPane().add(jLabel3, gridBagConstraints);

        AddClientOkButton.setText("OK");
        AddClientOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddClientOkButtonActionPerformed(evt);
            }
        });
        jPanel1.add(AddClientOkButton);

        AddClientCancelButton.setText("Cancel");
        AddClientCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddClientCancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(AddClientCancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        supplierNameLabel.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(supplierNameLabel, gridBagConstraints);

        jLabel7.setText("Price");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(jLabel7, gridBagConstraints);

        jLabel9.setText("Supplier Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(jLabel9, gridBagConstraints);

        priceLabel.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(priceLabel, gridBagConstraints);

        itemNameLabel.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        getContentPane().add(itemNameLabel, gridBagConstraints);

        jLabel6.setText("Quantity");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(quantityTextField, gridBagConstraints);

        jLabel2.setText("Location");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        ledgerLocationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ledgerLocationComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledgerLocationComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        getContentPane().add(ledgerLocationComboBox, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddClientOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddClientOkButtonActionPerformed
        
        Client c = client; 
                
        if(!checkItem()){
            Client loc = (Client) ledgerLocationComboBox.getSelectedItem();
            if(ItemLimit.checkItemLimitExist(itemNumber, loc.getClientId().toString()) > 0){
                ItemLimit i = ItemLimit.getItemLimit(itemNumber, loc.getClientId().toString());
                int result = ItemLimit.updateItemLimit(itemNumber, loc.getClientId().toString(), FractionAction.convertToDouble(quantityTextField.getText()).toString(), i.getItemLimitId().toString());
                if(!(result < 0) ){
                    JOptionPane.showMessageDialog(this,ErrorMessages.CONFIRM_EDITED_ITEM ,ErrorMessages.TITLE_SUCCESS,JOptionPane.INFORMATION_MESSAGE);
                }
                this.dispose();
                
            } else {
                int result = ItemLimit.insertItemLimit(itemNumber, loc.getClientId().toString(), FractionAction.convertToDouble(quantityTextField.getText()).toString());
                if(!(result < 0) ){
//                    success();
                    this.dispose();
                }
            }
        }
}//GEN-LAST:event_AddClientOkButtonActionPerformed

    private void AddClientCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddClientCancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
}//GEN-LAST:event_AddClientCancelButtonActionPerformed

    private void ledgerLocationComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledgerLocationComboBoxActionPerformed
        // TODO add your handling code here:
        Client loc = (Client) ledgerLocationComboBox.getSelectedItem();
        if(ItemLimit.checkItemLimitExist(itemNumber, loc.getClientId().toString()) > 0){
                ItemLimit i = ItemLimit.getItemLimit(itemNumber, loc.getClientId().toString());
                quantityTextField.setText(FractionAction.convertToFraction(i.getItemLimitQuantity()));
        } else {
                quantityTextField.setText("0");
        }   
//        itemLedgerSearch();

    }//GEN-LAST:event_ledgerLocationComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//
//            public void run() {
//                AddClient dialog = new AddClient(new javax.swing.JFrame(), true);
//                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
//
//                    public void windowClosing(java.awt.event.WindowEvent e) {
//                        System.exit(0);
//                    }
//                });
//                dialog.setVisible(true);
//            }
//        });
//    }
    
    private boolean checkItem(){
        boolean errorFlg = false;
        String errMsg = new String();
        
        if(itemNameLabel.getText().equals("-")){
            errorFlg = true;
            errMsg += "* "+ErrorMessages.ERROR_TRANSACTION_ITEM;
        } 
//            if(transactionNumberTextField.getText().isEmpty()||transactionNumberTextField.getText() == null){
//                errorFlg = true;
//                errMsg += "* "+ErrorMessages.ERROR_TRANSACTION_NUMBER;
//            }
            if(quantityTextField.getText().isEmpty()||quantityTextField.getText() == null){
                errorFlg = true;
                errMsg += "* "+ErrorMessages.ERROR_ITEM_QUANTITY;
            } else {
                try{
//                    Integer.parseInt(quantityTextField.getText());
                    FractionAction.convertToDouble(quantityTextField.getText());
                } catch (Exception e) {
                      errorFlg = true;
                    errMsg += "* "+ErrorMessages.ERROR_ITEM_QUANTITY;
                }
            }
            
        Double quantity = FractionAction.convertToDouble(quantityTextField.getText());
//        int stocks = Integer.parseInt(supplierNameLabel.getText());
//         if(outFlg && stocks < quantity){
//                    errorFlg = true;
//                    errMsg += "* "+ErrorMessages.ERROR_TRANSACTION_QUANTITY_OFB;
//                    
//        }
//        
        if(errorFlg){
            
            JOptionPane.showMessageDialog(this,errMsg ,ErrorMessages.TITLE_ERROR,JOptionPane.ERROR_MESSAGE);
        }
        
        return errorFlg;
        
        
    
    }
     
     private void success(){
      int answer = JOptionPane.showConfirmDialog(this,ErrorMessages.CONFIRM_ADDED_ITEM,ErrorMessages.TITLE_SUCCESS,JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
          if(answer==0){
//             transactionNumberTextField.requestFocus();
//             transactionNumberTextField.setText("");
             quantityTextField.setText("");
//             transactionPriceTextField.setText("");
          }else{
             this.dispose();
         }
     }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddClientCancelButton;
    private javax.swing.JButton AddClientOkButton;
    private javax.swing.JLabel itemNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox ledgerLocationComboBox;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JLabel supplierNameLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the transaction
     */
    public Transaction getTransaction() {
        return transaction;
    }

    /**
     * @param transaction the transaction to set
     */
    public void setTransaction(Transaction transaction) {
        this.transaction = transaction;
    }

    /**
     * @return the potransaction
     */
    public PreorderTransaction getPotransaction() {
        return potransaction;
    }

    /**
     * @param potransaction the potransaction to set
     */
    public void setPotransaction(PreorderTransaction potransaction) {
        this.potransaction = potransaction;
    }
}
