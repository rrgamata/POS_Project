/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * logIn.java
 *
 * Created on Sep 30, 2010, 9:39:02 AM
 */

package pos_project.UI;

//import Common.*;
import java.net.NetworkInterface;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Properties;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import pos_project.classes.RegisteredMachine;
import pos_project.classes.User;

/**
 *
 * @author DEVELOPER
 */
public class ChangePasswordUi extends javax.swing.JDialog {
    JFrame parentFrame;
    private User user;
    boolean isVerify = false;
    boolean successFlg = false;
    boolean isMainLogin = false;
    
    /** Creates new form logIn */
    public ChangePasswordUi(JFrame parent, boolean modal) {
        super(parent, modal);
        parentFrame = parent;
        initComponents();
        this.getRootPane().setDefaultButton(btnLogin);
    }
    
      public ChangePasswordUi(JFrame parent, boolean modal, boolean isMain) {
        super(parent, modal);
        parentFrame = parent;
        isMainLogin = true;
        initComponents();
        this.getRootPane().setDefaultButton(btnLogin);
    }
    
      public ChangePasswordUi(JFrame parent, boolean modal, User user) {
        super(parent, modal);
        parentFrame = parent;
        initComponents();
        this.user = user;
        this.getRootPane().setDefaultButton(btnLogin);
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        newPassword = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        rePassword = new javax.swing.JPasswordField();
        jPanel1 = new javax.swing.JPanel();
        btnLogin = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        oldPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Log-In");
        setIconImage(null);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Old Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText("New Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel2, gridBagConstraints);

        newPassword.setNextFocusableComponent(rePassword);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 197;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(newPassword, gridBagConstraints);

        jLabel3.setText("Re-enter New Pasword");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(jLabel3, gridBagConstraints);

        rePassword.setNextFocusableComponent(btnLogin);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(rePassword, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        btnLogin.setMnemonic('l');
        btnLogin.setText("Change");
        btnLogin.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnLogin.setNextFocusableComponent(jButton2);
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });
        jPanel1.add(btnLogin);

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        getContentPane().add(jPanel1, gridBagConstraints);

        oldPassword.setNextFocusableComponent(newPassword);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        getContentPane().add(oldPassword, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        //loginUser();
        try{
            String machineName = java.net.InetAddress.getLocalHost().toString();
            Enumeration <NetworkInterface> nic = NetworkInterface.getNetworkInterfaces ();

 for (; nic.hasMoreElements ();) {
      NetworkInterface n = nic.nextElement ();

      System.out.println (n.getName () + ":" + java.util.Arrays.toString (n.getHardwareAddress ()));
 }
            int machineCount = 1;
            if(machineCount==0){
                //error
                JOptionPane.showMessageDialog(this,"Unauthorized Access.", "Error", JOptionPane.ERROR_MESSAGE);
            }else{
                //ArrayList<Integer> registeredHashCode = RegisteredMachine.getMachineHashCode2();
            
                    checkPassword();
                     this.dispose();
//                    System.out.println("login lang");
            
            }
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
//        if(successFlg)
           
//        try{
//            String machineName = java.net.InetAddress.getLocalHost().toString();
//            int machineHashCode = machineName.hashCode();
//            if(RegisteredMachine.getMachineCount()==RegisteredMachine.getMachineCount()){
//                //error
//                JOptionPane.showMessageDialog(this,"Unauthorized Access.", "Error", JOptionPane.ERROR_MESSAGE);
//            }else{
//                int registeredHashCode = RegisteredMachine.getMachineHashCode();
//                if(registeredHashCode==0){
//                    //update machine hash code
//                    RegisteredMachine rm = new RegisteredMachine();
//                    rm.setMachineNameHashCode(machineHashCode);
//                    rm.updateMachineHashCode();
//
//                    //LOGIN
//                    loginUser();
//                }else if(registeredHashCode == machineHashCode){
//                    //LOGIN
//                    loginUser();
//                }else{
//                    //error
//                    JOptionPane.showMessageDialog(this,"Unauthorized Access.", "Error", JOptionPane.ERROR_MESSAGE);
//                }
//            }
//        }catch(Exception e){
//            System.out.println(e.getMessage());
//        }
    }//GEN-LAST:event_btnLoginActionPerformed

//    private void loginUser(){
//        char[] pass = password.getPassword();
//        String str = String.valueOf(pass);
//        boolean isExisting = false;
////        isExisting = checkUsername(userName.getText());
//        int userId = User.checkUserName(userName.getText());
////        User loggingUser = checkBoth(userName.getText(),str);
//        User loggingUser = User.checkBoth(userName.getText(),str);
//
////        if(isExisting && loggingUser.getPassword().equals("")){
//        if(userId > 0 && loggingUser.getUserPassword() == null){
//            JOptionPane.setDefaultLocale(Locale.ENGLISH);
//            JOptionPane.showMessageDialog(this,"Invalid Password", "Error", JOptionPane.ERROR_MESSAGE);
//            password.setText(null);
//            password.requestFocus();
////        }else if(!isExisting){
//         }else if(userId == 0){
//            JOptionPane.setDefaultLocale(Locale.ENGLISH);
//            JOptionPane.showMessageDialog(this,"Invalid Username or Password", "Error", JOptionPane.ERROR_MESSAGE);
//            userName.setText(null);
//            password.setText(null);
//            userName.requestFocus();
//        } else {
//             user = loggingUser;
//           Properties userNane = new Properties();
//           if(isMainLogin){
//             System.setProperty("userName", loggingUser.getUserFirstName()+loggingUser.getUserLastName());
////             System.setProperties(userNane);
//           }
//             successFlg = true;
//              if(user.getUserType() == 0){
//                isVerify = true;
//            }
//        }
//    }
    
    private void checkPassword(){
        String oldPass = String.valueOf(oldPassword.getPassword());
        String newPass = String.valueOf(newPassword.getPassword());
        String rePass = String.valueOf(rePassword.getPassword());
        if(user.getUserPassword().equals(oldPass)){
            if(newPass.equals(rePass)){
                user.setUserPassword(rePass);
                User.updateUserPassword(user);
            } else {
                JOptionPane.showMessageDialog(this,"new Password and rePassword did not match", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this,"Old Password did not match", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField newPassword;
    private javax.swing.JPasswordField oldPassword;
    private javax.swing.JPasswordField rePassword;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the user
     */
    public User getUser() {
        return user;
    }

    /**
     * @param user the user to set
     */
    public void setUser(User user) {
        this.user = user;
    }
    
    public boolean getVerification(){
        return isVerify;
    }

}
